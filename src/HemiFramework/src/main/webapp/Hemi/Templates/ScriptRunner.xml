<?xml version="1.0" encoding="utf-8" ?>


<Template Title ="Script Runner">
    
    <import-style src ="Styles/jsprof.css" id ="jsprof" />
    <import-style src ="Styles/wideselect.css" id ="wideselect" />
    <import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
	<import-xml src = "Fragments/BuilderControls.xml" id = "BuilderControls" />
	
    <!--
    <div class = "buttons_bar" rid = "buttons-bar">
        <span style ="display:block;float:left;margin-left:10px;margin-top:5px;" rid ="builder-label"></span>
    </div>
	-->
    <div class="title">Script Description</div>
    <div>
        <select rid ="run_script_as">
            <option>Scripted</option>
        </select>
        <input type ="button" onclick ="${this}.RunScript()" value ="Run" />
		<span rid ="script_info">[ Volatile Script ]</span>
		<div class ="field_description">
			Note: Scripts run from this location will be loaded as modules.
		</div>
    </div>
    <div class ="field">
        <div class = "field_label">
            Name:
        </div>
        <div class = "field_input" rid ="lblLabel">[ Label ]</div>
    </div>

    <div class ="field">
        <div class = "field_label">
            Description:
        </div>
        <div class = "field_input" rid ="lblDescription">[ Description ]</div>
    </div>

    <textarea rid ="script_text" wrap ="off" style ="border:1px dotted #505050;margin:0px;width:100%;height:250px;"></textarea>

    <embedded-script>
        <![CDATA[
		template_init : function (){
			 Hemi.include("hemi.text");
			this.GetElementByRID("btnDel").style.display = "none";
			this.GetElementByRID("btnNew").style.display = "none";
			this.GetElementByRID("btnSave").style.display = "none";
			this.RefreshScriptBuilder();
			this.getProperties().builder_title = "Script Runner";
			this.scopeHandler("load_example",0,0,1);
		},
		RefreshScriptBuilder : function(){

		},
		template_destroy : function(){
			this._prehandle_load_example = 0;
		},
		/*
		SetLabel : function(s){
			Hemi.xml.setInnerXHTML(this.GetElementByRID("builder-label"),s);
		},
		*/
		RunScript : function(s){
			var aBuff = [];
			
			/// this.BuildScript();
			aBuff.push(this.GetElementByRID("script_text").value);

			var aParams = [Hemi.xml.getInnerText(this.GetElementByRID("lblLabel")), aBuff.join("\n"),"/MyModules/",0];
			this.RunControl("RunModule", aParams);
		},
		CreateNewObject : function(){
			this.GetElementByRID("script_text").value = "";
			if(this.LoadScriptText()){
				Hemi.xml.setInnerXHTML(this.GetElementByRID("lblLabel"),"Custom");
		        Hemi.xml.setInnerXHTML(this.GetElementByRID("lblDescription"),"Custom script");
				this.getProperties().script_id = this.getObjects().script_construct.id = "CustomId";
				this.RefreshScriptBuilder();
				Hemi.xml.setInnerXHTML(this.GetElementByRID("script_info"),"Id: " + this.getProperties().script_id);
			}
		},
		LoadObject : function(i){
			this.SetLabel("Loading ... " + i);
			this.getProperties().script_id = i;
			Hemi.xml.getXml("Examples/Runnable/" + i + ".xml",this._prehandle_load_example,1,i,1);
		},
		_handle_load_example : function(s, v){
			this.SetLabel("");
			if(!v || v.xdom==null || v.xdom.documentElement == null){
				 this.SetLabel("Failed to load module");
				 return;
			}
			var oExample = Hemi.xml.queryNode(v.xdom,"Examples","Example","Id",this.getProperties().script_id);
			if(!oExample){
				this.SetLabel("Failed to load example " + this.getProperties().script_id);
				return;
			}
			var sName = this.GetElementText(oExample, "Name");
			var sDescription = this.GetElementText(oExample, "Description");
			var sScript = this.GetElementText(oExample, "Script");
			
			this.GetElementByRID("script_text").value = sScript;
			if(this.LoadScriptText()){
				Hemi.xml.setInnerXHTML(this.GetElementByRID("lblLabel"),sName);
		        Hemi.xml.setInnerXHTML(this.GetElementByRID("lblDescription"),sDescription);
				this.getObjects().script_construct.id = this.getProperties().script_id;
				this.RefreshScriptBuilder();
				Hemi.xml.setInnerXHTML(this.GetElementByRID("script_info"),"Id: " + this.getProperties().script_id);
			}
		},

		ClearScript : function(){
				this.GetElementByRID("script_text").value = "";
                Hemi.xml.setInnerXHTML(this.GetElementByRID("lblLabel"),"[ Label ]");
                Hemi.xml.setInnerXHTML(this.GetElementByRID("lblDescription"),"[ Description ]");
				this.getObjects().script_construct = 0;
				this.SetLabel("");
				this.RefreshScriptBuilder();
		},


		BuildScript : function(){
			if(!this.getObjects().script_construct){
				this.SetLabel("Invalid module construct");
				return;	 
			}
			var sName = Hemi.text.trim(Hemi.xml.getInnerText(this.GetElementByRID("lblLabel")).value);
			this.getObjects().script_construct.name = sName;
			
			var sText = this.getObjects().script_construct.xhtml_content;
			this.GetElementByRID("script_text").value = sText;
		},

		UpdateScriptMember : function(){
			var sXhtml = this.GetElementByRID("script_text").value;
			this.getObjects().script_construct.xhtml_content = sXhtml;
			this.getObjects().script_construct.changes++;
		},

		LoadScriptText : function(){

			var sXhtmlContent = this.GetElementByRID("script_text").value
            Hemi.xml.setInnerXHTML(this.GetElementByRID("lblLabel"),"[ Label ]");
            Hemi.xml.setInnerXHTML(this.GetElementByRID("lblDescription"),"[ Description ]");

			this.getObjects().script_construct = this.NewComponentConstruct();
			this.getObjects().script_construct.xhtml_content = sXhtmlContent;
			this.RefreshScriptBuilder();
 			return 1;
		}


	]]>
    </embedded-script>
</Template>