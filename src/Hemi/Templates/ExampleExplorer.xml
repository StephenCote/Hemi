<Template Title ="Example Explorer" id = "ExampleExplorer">
    <import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
    <div class = "content_container">
        <div style = "float:left;width:25%;">
            <div rid ="tree" component = "tree" Application = "HemiFramework" participant-id = "examples" DirectoryId = "Examples">
            </div>
        </div>
        <div style = "width:65%;float:left;">
            <div style = "clear:both;" participant-id = "examples" component = "tree_context"></div>
            <div ___pointer_marker = "never" participant-id = "examples" rid ="content-viewer" component = "content_viewer">
            </div>
        </div>
        <div  style = "clear:both;"></div>
    </div>

    <embedded-script>
        <![CDATA[

	template_init: function () {
		if(!window.g_application_path) window.g_application_path = "/";
		Hemi.include("hemi.data.io");
        Hemi.include("hemi.data.io.proxy");
		Hemi.include("hemi.worker");
		Hemi.include("hemi.app.module");
		Hemi.include("hemi.app.module.test");
		Hemi.include("hemi.framework.io.provider");
        Hemi.include("hemi.framework.io.offline.provider");
		/// Hemi.include("core.io", "/Scripts/");
	
		Hemi.util.logger.addLogger(this, "Example Explorer", "Local Example Explorer", "751");
		Hemi.event.addScopeBuffer(this);
		this.scopeHandler("template_loaded", 0, 0, 1);
		this.joinTransactionPacket("examples");
		this.joinTransactionPacket("iobus");
		
		var oTR = this.getComponentByRID("tree");
		oTR.RePopulateTree();
		
		Hemi.data.io.service.mapSession(this.GetSession());

        /// Examples are run in OFFLINE mode
        ///
        this.serveTransaction("change_bus", Hemi.data.io.service.getBusType().OFFLINE,1,"examples");
		this.serveTransaction("change_bus", Hemi.data.io.service.getBusType().OFFLINE,1,"iobus");
		
		/// Kick the 'viewerload' packet in case it was missed; this participant will drop out after the first call
		///
		this.serveTransaction("viewerload", this, 1, "examples");

        /// var oViewer = this.getComponentByRID("content-viewer");
        /// alert(oViewer.getProperties().template_loaded);
	},
    _handle_viewerload: function(s, v){
        var oViewer = this.getComponentByRID("content-viewer");
		/*
        oViewer.getElementByRID("btnSave").style.display = "none";
        oViewer.getElementByRID("btnDel").style.display = "none";
        oViewer.getElementByRID("btnPub").style.display = "none";
		*/
    },
	_handle_treenavigate: function (s, v) {
		var oTree = v.data.src;
		var _p = this.getProperties();
		_p.application = oTree.GetCurrentApplication();
		_p.rootName = oTree.GetCurrentRootName();
		_p.current_group_id = oTree.GetCurrentGroupId();
		_p.current_group_name = oTree.GetCurrentGroupName();
		_p.current_path = oTree.GetCurrentPath();
	},
	_handle_change_bus: function (s, v) {

	},
	_handle_template_loaded: function (v) {
		if (v && v.getProperties().local_invoke) {
			if (v.getProperties().local_invoke_params) v[v.getProperties().local_invoke].apply(v, v.getProperties().local_invoke_params);
			else v[v.getProperties().local_invoke]();
			v.getProperties().local_invoke = 0;
			v.getProperties().local_invoke_params = 0;
		}
	},
	getProps: function () {
		var _p = this.getProperties();
		var iBT = this.getTemplateSpace().getSpaceObjectByName("choose_bus");
		iBT = (iBT && iBT.object ? iBT.object.getApplicationComponent().getBusType() : Hemi.data.io.service.getBusType().OFFLINE);
		return {
			application: "DWAC",
			rootName: _p.rootName,
			current_group_id: _p.current_group_id,
			current_group_name: _p.current_group_name,
			current_path: _p.current_path,
			busType: iBT
		};
	},
	_handle_newcontent: function (s, v) {
		this.handleViewer(v.data.src, "CreateNew");
	},
	_handle_opencontent: function (s, v) {
		this.handleViewer(v.data.src, "Load");
	},
	handleViewer: function (oViewer, sAction) {
		var _p = this.getProperties(), oWp;
		var oProps = this.getProps();
		var sId = Hemi.guid();
		if (sAction == "Load" || sAction == "Delete"){
			sId = oViewer.GetCurrentItem().item_id;
			oProps.local_invoke_params = [sId];
		}
		oProps.local_invoke = sAction + "Object";
		switch (_p.current_group_name) {
			case "Components":
				oWp = Hemi.app.createWindow("Component Builder", "Templates/ComponentBuilder.xml", "component-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
				break;

			case "Fragments":
				oWp = Hemi.app.createWindow("Fragment Builder", "Templates/FragmentBuilder.xml", "fragment-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
				break;
			case "Modules":
				oWp = Hemi.app.createWindow("Module Builder", "Templates/ModuleBuilder.xml", "module-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
				break;
			case "Tests":
				oProps.testFeat = 1;
				oWp = Hemi.app.createWindow("Test Builder", "Templates/ModuleBuilder.xml", "module-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
				break;
			case "Templates":
				oWp = Hemi.app.createWindow("Template Builder", "Templates/TemplateBuilder.xml", "template-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
				break;

			case "Tasks":
				oWp = Hemi.app.createWindow("Task Builder", "Templates/TaskBuilder.xml", "task-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
				break;
			case "Projects":
				oWp = Hemi.app.createWindow("Project Builder", "Templates/ProjectBuilder.xml", "project-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
				break;
            case "Framework":
                oWp = Hemi.app.createWindow("Script Runner", "Templates/ScriptRunner.xml", "script-" + sId, 0, 0, oProps, this._prehandle_template_loaded);
                break;
		}
		if (oWp) {
			oWp.then((oW)=>{
				oW.resizeTo(650, 650);
				Hemi.app.getWindowManager().then((oM)=>{oM.CenterWindow(oW);});;
				// Destroy the window when finished
				//
				oW.setHideOnClose(0);
			});
		}
	},
	_handle_deletecontent: function (s, v) {
		var sId = v.data.src.GetCurrentItem().item_id;
		if(typeof sId == "number") sId = "" + sId;
		var oR = this.queryData("DWAC", "Delete", 0, 0, sId, 0, 0, 0);
		if (!oR.status) {
			alert("Failed to delete");
		}
		else {
			this.refreshViewer();
		}
	},
	queryData: function (sApp, sAct, aF, sName, sId, bFull, bAsync, fHandler) {
		var iBT = this.getTemplateSpace().getSpaceObjectByName("choose_bus");
		iBT = (iBT && iBT.object ? iBT.object.getApplicationComponent().getBusType() : Hemi.data.io.service.getBusType().OFFLINE);
		var _p = this.getProperties();
		var oRequest = Hemi.data.io.service.newIORequest(
						iBT,
						sApp,
						_p.current_group_name,
						_p.catalog,
						sAct, //action
						(sId ? sId : 0), // id
						(sName ? sName : 0), // name
						(bFull ? 0 : 1), // details only
						(bAsync ? 1 : 0), // async
						0, // cache
						0 // instruction
					);
		this.log("queryData: " + iBT + " / " + sApp + " / " + _p.catalog + " / " + (_p.group_id ? _p.group_id : _p.group_name) + " / " + sAct + " / " + (sId ? sId : "") + " " + (sName ? sName : ""));
		Hemi.data.io.service.openRequest(Hemi.data.io.service.getSubject(), oRequest, fHandler);
		return Hemi.data.io.service.getResponseByName(oRequest.responseId);
	},
	refreshViewer: function () {
		this.getTemplateSpace().getSpaceObjectByName("content-viewer").object.getApplicationComponent().ClearCache(1);
		var oT = this.getTemplateSpace().getSpaceObjectByName("tree").object.getApplicationComponent();
		oT.SelectLeaf(oT.GetCurrentGroupName());
	}
					 ]]>
    </embedded-script>
</Template>