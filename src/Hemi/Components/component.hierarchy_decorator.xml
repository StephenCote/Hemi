<?xml version="1.0" encoding="utf-8" ?> 
<!-- XML Component File -->
<application-components>
	 <application-component id = "hierarchy_decorator" participant-id ="canvas">
			<![CDATA[
         component_init : function(){
            Hemi.include("hemi.util.logger");
            Hemi.util.logger.addLogger(this, "Hierarchy Decorator", "Hierarchy Decorator", 231);
            this.log("Hierarchy decorator loaded");
         },
				 SetHierarchy : function(o){
						this.getObjects().Hierarchy = o;	 
					},
				 handle_canvas_mousedown : function(oCanvas, e){
            /// this.log("Hierarchy decorator: MouseDown " + oCanvas.getProperties().MouseTrackChoose);
						if(!oCanvas.getProperties().MouseTrackChoose) return;
						
						oCanvas.ClearTempCanvas();
						var oShape = oCanvas.getObjects().CurrentShape;
						if(oShape.type == "Rect"){
							var oM = oCanvas.Rect(oShape.x, oShape.y, oShape.width, oShape.height, "#00FF00", "#000000");
							oM.selectable = 0;
							var oCurrentNode = this.getObjects().Hierarchy.getObjects().nodes[oShape.reference_id];
							this.BlotChildrenToTempShape(oCanvas, oCurrentNode, oCurrentNode, oM);
						}

				 },
				 handle_canvas_mouseup : function(oCanvas, e){
						var _s = oCanvas.getProperties(), _p = oCanvas.getObjects();
						oCanvas.ClearTempCanvas();
						if(
									!_s.MouseTrackChoose
									||
									!_p.CurrentShape
									||
									_p.CurrentShape.reference_id < 0
									||
									!_p.MouseDropShape
									||
									_p.MouseDropShape.reference_id < 0
						){
							return;
						}
						var oSourceNode = this.getObjects().Hierarchy.getObjects().nodes[_p.CurrentShape.reference_id];
						var oTargetNode = this.getObjects().Hierarchy.getObjects().nodes[_p.MouseDropShape.reference_id];
						if(
							oSourceNode.type == "org"
							&&
							oTargetNode.type == "org"
						){
							this.getObjects().Hierarchy.ReparentOrganizationNode(oSourceNode,oTargetNode);
						}	
							
				 },
				 handle_canvas_mousemove : function(oCanvas, e){
					//if(!oCanvas.getProperties().MouseTrackDown) return;
					oCanvas.ClearTempCanvas();
          
					
					var sDropColor = "#FFFF00";
					var oDropShape = oCanvas.getObjects().MouseDropShape;
					var oDropNode, oCurrentNode = 0;
							 
					if(oDropShape && oDropShape.reference_id >= 0){
						oDropNode = this.getObjects().Hierarchy.getObjects().nodes[oDropShape.reference_id];
					}

					var oCurrent = oCanvas.getObjects().CurrentShape;
					if(oCanvas.getProperties().MouseTrackChoose && oCurrent && oCurrent.reference_id >= 0){
            this.log("Hierarchy decorator: MouseMove " + oCanvas.getProperties().MouseTrackChoose);
						oCurrentNode = this.getObjects().Hierarchy.getObjects().nodes[oCurrent.reference_id];
						if(oCurrent.type == "Rect"){
							var oM = oCanvas.Rect(oCurrent.x, oCurrent.y, oCurrent.width, oCurrent.height, "#00FF00", "#000000");
							oM.selectable = 0;
							oM = oCanvas.Rect(
								oCanvas.getProperties().MouseTrackLeft - oCanvas.getProperties().MouseOffsetX,
								oCanvas.getProperties().MouseTrackTop - oCanvas.getProperties().MouseOffsetY,
								oCurrent.width,
								oCurrent.height, 
								"#00FF00", "#000000"
							);
							oM.selectable = 0;
							this.BlotChildrenToTempShape(oCanvas, oCurrentNode, oCurrentNode, oM);
						}
						
						if(oDropNode && oCurrentNode &&
									(
									this.getObjects().Hierarchy.IsChild(oDropNode,oCurrentNode)
									||
									oCurrentNode.parent == oDropNode.index
									)
						) sDropColor = "#FF0000";
					} 

					if(oDropNode){
						var oM = oCanvas.Rect(oDropShape.x, oDropShape.y, oDropShape.width, oDropShape.height, sDropColor, "#000000");
						oM.selectable = 0;
					}
				 },
				   
				 BlotChildrenToTempShape : function(oCanvas, oSourceParent, oCurrent, oShape){
					for(var i = 0; i < oCurrent.children.length; i++){
						var oChild = this.getObjects().Hierarchy.getObjects().nodes[oCurrent.children[i]];
						if(!oChild.shape) continue;
						var iX = oChild.shape.x - (oSourceParent.shape.x - oShape.x);
						var iY = oChild.shape.y - (oSourceParent.shape.y - oShape.y);
						var oM = oCanvas.Rect(oChild.shape.x, oChild.shape.y, oChild.shape.width, oChild.shape.height, "#00FF00", "#000000");
						oM.selectable = 0;

						oM = oCanvas.Rect(
							iX,
							iY,
							oShape.width,
							oShape.height, 
							oShape.fillStyle, oShape.strokeColor
						);
						oM.selectable = 0;
						this.BlotChildrenToTempShape(oCanvas, oSourceParent,oChild,oShape);
					    
				    }
				 }
			]]>
		</application-component>				
</application-components>