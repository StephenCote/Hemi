<?xml version="1.0" encoding="utf-8" ?>
<Template Title = "New Task List">
		<import-xml src = "Templates/TemplateTools.xml" id = "TemplateTools" />
		<div class ="field">
		<div class = "field_label">
			Name:
		</div>
		<div class = "field_input">
			<input type = "text" class = "input_text" rid = "task_name" />
		</div>
	</div>
	<div class ="field">
		<div class = "field_label">
			Description:
		</div>
		<div class = "field_input">
			<input type = "text" class = "input_text" rid = "task_description" />
		</div>
		<div class = "field_description">
				 (<i>optional</i>)
		</div>
	</div>

	<div>
			<input type ="checkbox" rid ="chk_xml_script" /> Include example of loading XML, and handling it inline
			<br />
		 	<input type ="checkbox" rid ="chk_script_global" /> Include example of invoking a global function
			<br />
			<input type ="checkbox" rid ="chk_script_component" /> Include example of component/template function (requires pre-processor)
			<br />
			<input type ="checkbox" rid ="chk_dom_load" /> Include dependency on window loading
			<br />
			<input type ="checkbox" rid ="chk_space_load" /> Include dependency on first space loading
			<br />
			<input type ="checkbox" rid ="chk_sample_named_dependency" /> Include example of a named dependency
			<br />
			<input type ="checkbox" rid ="chk_sample_cdata_script" /> Include example of embedded scripting
	</div>
	<div>
		<input type ="button"	value ="Create" onclick ="${this}.CreateNewTask()" />
		<input type ="button"	value ="Close" onclick ="${this}.Close()" />
	</div>
	<embedded-script>
		<![CDATA[
		template_init : function(){
				
		},
		CreateNewTask : function(){
				var sName = this.GetElementByRID("task_name").value.replace(/$\s*/,"").replace(/\s*$/,"");
				if(sName.length == 0){
					this.setStatus("Invalid name.  Name must be specified.");
					return;
				}
				 
				var oBuilder = Hemi.registry.service.getObject(this.getProperties().opener_id);

				oBuilder.ClearTaskList();

				var oConstruct = oBuilder.NewComponentConstruct(oBuilder.GetTaskList());
				oConstruct.changes++;
				
				var aBuff = [];
						
				oBuilder.GetElementByRID("task_name").value = this.GetElementByRID("task_name").value;
				oBuilder.GetElementByRID("task_description").value = this.GetElementByRID("task_description").value;
				var Example1 = 0;
				if(this.GetElementByRID("chk_xml_script").checked){
					oBuilder.AddTaskConstruct(oConstruct,"LoadXmlAndScriptIt","xml","api/hemi.task.xml","script","function RunTaskScript(oTask){\n\tvar oXmlDocument = oTask.data;\n\t// View the serialized XML document\n\talert(oXmlDocument.documentElement.nodeName);\n\treturn true;\n}");
				}
				if(this.GetElementByRID("chk_dom_load").checked){
					oBuilder.AddTaskConstruct(oConstruct,"WaitForWindow","[default]","[nothing]","script","alert(\"The window loaded\");");
					oBuilder.AddTaskDependencyConstruct(oConstruct,"WaitForWindow","dom_event_window_load",1,0);
				}
				if(this.GetElementByRID("chk_space_load").checked){
					oBuilder.AddTaskConstruct(oConstruct,"WaitForPrimarySpace","[default]","[nothing]","script","alert(\"The space started\");");
					oBuilder.AddTaskDependencyConstruct(oConstruct,"WaitForPrimarySpace","space_driver",1,0);
				}
				if(this.GetElementByRID("chk_script_global").checked){
					oBuilder.AddTaskConstruct(oConstruct,"CallScript","function","SomeFunction()","[default]","[nothing]");
				}
				if(this.GetElementByRID("chk_script_component").checked){
					oBuilder.AddTaskConstruct(oConstruct,"CallComponentScript","function","${this}.SomeFunction.apply(${this})","[default]","[nothing]");
				}
				if(this.GetElementByRID("chk_sample_named_dependency").checked){
					oBuilder.AddTaskConstruct(oConstruct,"WaitForDependency","[default]","[nothing]","script","alert(\"The dependency loaded\");");
					oBuilder.AddTaskDependencyConstruct(oConstruct,"WaitForDependency","some_named_event_to_occur",1,0);
				}
				if(this.GetElementByRID("chk_sample_cdata_script").checked){
					oBuilder.AddTaskConstruct(oConstruct,"DemoScript","script","function RunTaskScript(oTask){\n\t// Do some scripting\n}\n","[default]","[nothing]");
				}
				if(aBuff.length) aBuff.push("");
				
				oConstruct.xhtml_content = aBuff.join("\n");
				
				oBuilder.getObjects().task_construct = oConstruct;
				oBuilder.BuildTaskList();
				this.getProperties().built = 1;
				oBuilder.RefreshTaskBuilder();
				this.Close();
		},
        local_handle_close : function(oWin){
            var oBuilder = Hemi.registry.service.getObject(this.getProperties().opener_id);
            if(oBuilder && typeof oBuilder.getFocus == "function") oBuilder.getFocus();
		}
    ]]>
	</embedded-script>
</Template>
