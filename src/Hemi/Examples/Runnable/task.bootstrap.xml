<?xml version="1.0" encoding="UTF-8"?>
<tasks>
     <!--
     Hemi 3.2
     This example shows how to use a tasklist to bootstrap a set of asynchronous tasks.
     All of this is captured by synchronous convenience methods in Hemi.app
     
     In this case, the bootstrap:
     1) Loads the Window Manager component (Async Xml Request)
        a) This configuration uses the task 'component' type and <param /> list to create the object and then keep a reference to the created object
        b) The task service now includes token processing support for ${task}, ${task.name}, ${taskservice}, and ${taskservice.id}
        c) Note the callback handler from the component is used to advance the task and return the task dependency. The dependency is returned because the action takes place after the task handler was processed.
     2) Load the window profiler base (Async Xml Request)
        a) This configuration uses a script block to create a new application component.
        b) The task depends on the manager
        c) The component callback handler advances the task state.
     3) Load the template into the window base (Async Xml Request)
        a) Like #2, this configuration uses a script block to load a template into the #2 task (referenced by name)
        b) The task depends on the window profiler base.
        
     -->
    <task id ="BootStrap" action-type ="none" action ="none" handler-type ="none" handler ="none">
        <task rid ="load_window_profiler_template" auto-execute ="1" />
    </task>
    <task id ="load_manager" action-type ="component" action ="Hemi.app.comp.newInstance" handler-type ="script" handler ="#cdata">
        <![CDATA[
            function RunTaskScript(oTask){
                Hemi.log("loading manager ...");
                oTask.component.setAsync(1);
                oTask.component.loadComponent('manager', 'Components/component.manager.xml');
                return 0;
            }
        ]]>
        <param>manager</param>
        <param>0</param>
        <param>hemi.space_1</param>
        <param eval ="1">
            <![CDATA[
                /// TODO: Need a way of tokenizing the TaskObject reference
                /// ${task}, ${task.name}, ${taskservice}, ${taskservice.id}
                ///
                function (sName, oA) {
                    Hemi.log("Manager loaded");
                    ${taskservice}.advance(${task}, 1, 1);
                    ${taskservice}.returnDependency("load_manager");
                }
             ]]>
        </param>
    </task>
    <task id ="load_window_profiler_base" handler-type ="script" handler ="#cdata" action-type ="none" action="none">
        <task rid ="load_manager" auto-execute ="1" />
        <![CDATA[
            function RunTaskScript(oTask){
                Hemi.log("Loading window component base ...");
                var sTemplateId = 'FrameworkProfiler';
                var oSpace = Hemi.app.space.service.getPrimarySpace();
                var sId = oSpace.space_id;
                var oD = document.createElement('div');
                oSpace.space_element.appendChild(oD);
                var x = Hemi.object.xhtml.newInstance(oD, 1, sTemplateId, sId, Hemi.data.form.service, 0, 0, 0);
                oSpace.addSpaceObject(x, sTemplateId);
                x.post_init();
                var oA = Hemi.app.comp.newInstance(0, 0, x.getObjectId(),
                    function () {
                        Hemi.log("Advancing ${task.name} ...");
                        ${taskservice}.advance(${task}, 1, 1);
                    },
                    0, 1
                );
                oTask.component = oA;
                oA.setTemplateIsSpace(1);
                oA.setAsync(1);
                oA.loadComponent('window', 'Components/component.window.xml');
                return false;
             }
        ]]>
    </task>
    <task id ="load_window_profiler_template" action-type ="none" action ="none" handler-type ="script" handler ="#cdata">
        <task rid ="load_window_profiler_base" auto-execute ="1" />
        <![CDATA[
            function RunTaskScript(oTask){
                Hemi.log("Loading window component template ...");
                var oRelTask = ${taskservice}.getTaskByName("load_window_profiler_base");
                oRelTask.component.local_template_init = function () {
                    Hemi.log("Initializing window component template ...");
                    var oW = ${taskservice}.getTaskByName("load_window_profiler_base").component;
                    /// var oM = ${taskservice}.getTaskByName("load_manager").component;
                    /// oM.CenterWindow(oW);
                    oW.moveTo("50px","50px");
                    oW.getFocus();
                    ${taskservice}.advance(${task}, 1, 1);
                };
                oRelTask.component.post_init();
                oRelTask.component.loadTemplate("Templates/FrameworkProfiler.xml");
                return false;
             }
        ]]>
    </task>
</tasks>