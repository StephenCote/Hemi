<?xml version="1.0" encoding="UTF-16"?>
<source>
<name>Hemi.util.config</name>
<project>
<name>Hemi JavaScript Framework</name>
<url-title>Hemi JavaScript Framework</url-title>
<url>/Hemi/</url>
</project>

<package>
<path>Hemi.util</path>
<library>Hemi</library>
<description>The Configuration class imports and parses XML for providing application level configuration.</description>
<static-class>
<name>config</name>
<version>3.5.1</version>
<description>Static initializer for new Config objects.</description>
<method>
<name>newInstance</name>
<param name="s" type="variant">XML Document representing config data, or string representing path to XML file.</param>
<param name="h" optional="1" type="variant">String representinga function or a function pointer to be invoked when the config data has been loaded, if the loading is asynchronous.</param>
<param default="false" name="a" optional="1" type="boolean">Bit indicating whether the loading is asynchronous.</param>
<return-value name="c" type="Config">Returns a new Wire instance.</return-value>
<description>Creates and returns a new Config instance.</description>
</method>
</static-class>
<class>
<name>ConfigInstance</name>
<version>3.5.1</version>
<description>Service for sending messages, and sending and receiving publication broadcasts.</description>
<property get="1" internal="1" type="String">
<name>object_id</name>
<description>Unique instance identifier.</description>
</property>
<property get="1" internal="1" type="String">
<name>object_version</name>
<description>Version of the object class.</description>
</property>
<property get="1" internal="1" type="String">
<name>object_type</name>
<description>The type of this object.</description>
</property>
<property get="1" internal="1" type="int">
<name>ready_state</name>
<description>Object load and execution state.  Follows: 0 unitialized, 1 through 3 variant, 4 ready, 5 destroyed.</description>
</property>
<property get="1" internal="1" type="object">
<name>object_config</name>
<description>Object API structure for storing sub structures: object_config.pointers and object_config.status.</description>
</property>
<method>
<name>getObjectId</name>
<return-value name="i" type="String">The unique object instance id.</return-value>
<description>Returns the unique id of the object.</description>
</method>

<method>
<name>getObjectType</name>
<return-value name="t" type="String">The type of the object instance.</return-value>
<description>Returns the type of the object.</description>
</method>

<method>
<name>getObjectVersion</name>
<return-value name="v" type="String">The version of the object instance.</return-value>
<description>Returns the version of the object.</description>
</method>

<method>
<name>getReadyState</name>
<return-value name="s" type="int">The object ready state.</return-value>
<description>Returns the state of the object.</description>
</method>

<method>
<name>getStatus</name>
<return-value name="o" type="object">The object_config.status substructure.</return-value>
<description>Returns the object_config.status sub structure.</description>
</method>

<method>
<name>getPointers</name>
<return-value name="o" type="object">The object_config.pointers substructure.</return-value>
<description>Returns the object_config.pointers sub structure.</description>
</method>

<method>
<name>setElementParentName</name>
<param name="n" type="String">Name of the root element containing the config data.</param>
<description>Specifies the root element that holds the config data.</description>
</method>
<method>
<name>setElementName</name>
<param name="n" type="String">Name of the element containing and individual config item.  The default value is <i>param</i>.</param>
<description>Specifies the element that holds a single config item.</description>
</method>
<method>
<name>setAttrNameName</name>
<param name="n" type="String">Name of the attribute used to identify a config data item.  The default value is <i>name</i>.</param>
<description>Specifies the attribute used to identify the config data name.</description>
</method>
<method>
<name>setAttrValueName</name>
<param name="n" type="String">Name of the attribute used to identify a config data value.  The default value is <i>value</i>.</param>
<description>Specifies the attribute used to identify the config data value.</description>
</method>
<method>
<name>clearConfig</name>
<description>Clears internal hashmaps of config data.</description>
</method>
<method>
<name>destroy</name>
<description>Clears internal pointers and data, preparing the object for destruction.</description>
</method>
<method>
<name>sigterm</name>
<description>Sends a termination signal to this object, causing it to be destroyed.</description>
</method>
<method>
<name>reload</name>
<description>Clears internal hashmaps and reloads config data from original source.</description>
</method>
<method>
<name>init</name>
<description>Initializes an empty configuration.</description>
</method>
<method>
<name>load</name>
<param name="p" type="String">Path to the XML-based configuration.</param>
<param name="h" optional="1" type="function">Function pointer to be invoked when the config data has been loaded, if the loading is asynchronous.</param>
<param default="false" name="a" optional="1" type="boolean">Bit indicating whether the loading is asynchronous.</param>
<description>Loads the specified configuration file.</description>
</method>
<method>
<name>getParams</name>
<return-value name="a" type="array">Array of ConfigObjects</return-value>
<description>Returns an array of ConfigObjects.</description>
</method>
<method>
<name>serialize</name>
<param name="XMLDocument" optional="1" type="XMLDocument">XMLDocument onto which the parameters are serialized.</param>
<return-value name="xml" type="XMLDocument">XMLDocument representing the parameters.</return-value>
<description>Serializes the current configuration into an XML document.</description>
</method>
<method>
<name>writeParam</name>
<param name="XMLDocument" type="XMLDocument">XMLDocument onto which the parameters are serialized.</param>
<param name="name" type="String">String representing the name of the config value.</param>
<param name="value" type="String">String representing the value.</param>
<return-value name="b" type="boolean">Bit indicating whether the operation succeeded</return-value>
<description>Sets a parameter value.</description>
</method>
if(!o || !x) return 0;
HemiEngine.log("Write Param " + x + "=" + v);
<method>
<name>setParam</name>
<param name="name" type="String">String representing the name of the config value.</param>
<param name="value" type="String">String representing the value.</param>
<return-value name="b" type="boolean">Bit indicating whether the operation succeeded</return-value>
<description>Sets a parameter value.</description>
</method>
Value exists, so overwrite

<method>
<name>getParam</name>
<param name="x" type="variant">String or integer representing the index or name of the config value to return.</param>
<return-value name="v" type="String">Value of the specified ConfigObject.</return-value>
<description>Returns the value of the specified ConfigObject.</description>
</method>
<object internal="1">
<name>ConfigObject</name>
<property name="name" type="String">The name of the config key.</property>
<property name="value" type="String">The value of the config key.</property>
</object>
<method internal="1">
<name>parseConfig</name>
<param name="o" type="XMLDocument">XML Document representing the config data.</param>
<description>Parses the specified XML document for config data.</description>
</method>
</class>
</package>
<index><description>The Configuration class imports and parses XML for providing application level configuration.</description><url>Hemi_api.html</url><url-title>API Index</url-title></index></source>